#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# for (i=0; i<5; i++) println(i)

# memory map:
#   81: store a '1' for decrement
#   85: upper limit
#   90: looping variable

ILOAD  1
STOR   81

ILOAD  5
STOR   85

ILOAD  0
STOR   90

WRITE  90

LOAD   90  \
ADD    81   90++
STOR   90  /

#DUMP   99

LOAD   85  \
SUB    90   if (85 - 90 != 0) branch to WRITE 90
BN     6   /

HALT   99
