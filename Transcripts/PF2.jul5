Script started on Tue 05 Jul 2016 11:43:25 AM CDT
==============================================================================
 The temperature in Amarillo is  89
==============================================================================
[usnick@cs ~]$ 
[usnick@cs ~]$ cd PF2/lab7-VPC/
[usnick@cs lab7-VPC]$ nums
3. [usnick@cs lab7-VPC]$ 
3. [usnick@cs lab7-VPC]$ cp VPCrte.pseudo /usr/tmp/PF2
4. [usnick@cs lab7-VPC]$ vi VPCrte.pseudo

        <snip!>  (text deleted from output)

5. [usnick@cs lab7-VPC]$ ls
addTwoNumsInteractive.src  badOpCode.exe	  hosts       runprog.obfuscate
addTwoNums.src		   badOpcode.src	  ifElse.exe  S13test2
arithExpr.src		   badOperand.src	  ifElse.src  testQ.src
Assemble.class		   countDown.exe	  if.exe      test.src
Assemble.java		   countDown.src	  if.src      VPCrte.class
Assemble.java.bak	   countUp.exe		  IO.class    VPCrte.java
Assemble.pseudo		   countUp.src		  IO.java     VPCrte.java.bak
assign			   divideInteractive.src  o	      VPCrte.pseudo
averageNums.exe		   dump			  ops
averageNums.src		   files		  pad
6. [usnick@cs lab7-VPC]$ java Assemble addTwoNums.src
0505
0780
0503
0180
0790
0990
0099
7. [usnick@cs lab7-VPC]$ java Assemble addTwoNums.src > addTwoNums.exe
8. [usnick@cs lab7-VPC]$ 
8. [usnick@cs lab7-VPC]$ java VPCrte addTwoNums.exe debug
readToMemory: [0] = (0505)
readToMemory: [1] = (0780)
readToMemory: [2] = (0503)
readToMemory: [3] = (0180)
readToMemory: [4] = (0790)
readToMemory: [5] = (0990)
readToMemory: [6] = (0099)
===================================================================
PCREG = 0000
IRREG = 0000
GPREG = 0000

MEMORY:     0     1     2     3     4     5     6     7     8     9
    ---------------------------------------------------------------
     0|  0505  0780  0503  0180  0790  0990  0099  0000  0000  0000
     1|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     2|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     3|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     4|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     5|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     6|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     7|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     8|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     9|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000

===================================================================
runProg:  MEMORY[00] = 0505, opcode = 05, operand = 05, GPREG = 0000 (ILOAD)
runProg:  MEMORY[01] = 0780, opcode = 07, operand = 80, GPREG = 0005 (STOR)
runProg:  MEMORY[02] = 0503, opcode = 05, operand = 03, GPREG = 0005 (ILOAD)
runProg:  MEMORY[03] = 0180, opcode = 01, operand = 80, GPREG = 0003 (ADD)
runProg:  MEMORY[04] = 0790, opcode = 07, operand = 90, GPREG = 0008 (STOR)
runProg:  MEMORY[05] = 0990, opcode = 09, operand = 90, GPREG = 0008 (WRITE)
[90] -> 8
runProg:  MEMORY[06] = 0099, opcode = 00, operand = 99, GPREG = 0008 (HALT)
9. [usnick@cs lab7-VPC]$ java VPCrte addTwoNums.exe
[90] -> 8
10. [usnick@cs lab7-VPC]$ java Assemble addTwoNums.srcvi VPCrte.pseudo

        <snip!>  (text deleted from output)

11. [usnick@cs lab7-VPC]$ 
11. [usnick@cs lab7-VPC]$ 
11. [usnick@cs lab7-VPC]$ vi VPCrte.pseudo

        <snip!>  (text deleted from output)

12. [usnick@cs lab7-VPC]$ 
12. [usnick@cs lab7-VPC]$ 
12. [usnick@cs lab7-VPC]$ 
12. [usnick@cs lab7-VPC]$ 
12. [usnick@cs lab7-VPC]$ 
12. [usnick@cs lab7-VPC]$ vi VPCrte.pseudo

        <snip!>  (text deleted from output)

13. [usnick@cs lab7-VPC]$ vi VPCrte.pseudo

        <snip!>  (text deleted from output)

14. [usnick@cs lab7-VPC]$ 
14. [usnick@cs lab7-VPC]$ 
14. [usnick@cs lab7-VPC]$ mail usnick
Subject: pad mem index in readToMem
.
EOT
Null message body; hope that's ok
15. [usnick@cs lab7-VPC]$ vi VPCrte.pseudo

        <snip!>  (text deleted from output)

16. [usnick@cs lab7-VPC]$ 
16. [usnick@cs lab7-VPC]$ 
16. [usnick@cs lab7-VPC]$ ls
addTwoNums.exe		   assign	    countUp.exe		   if.exe	      S13test2
addTwoNumsInteractive.src  averageNums.exe  countUp.src		   if.src	      testQ.src
addTwoNums.src		   averageNums.src  divideInteractive.src  IO.class	      test.src
arithExpr.src		   badOpCode.exe    dump		   IO.java	      VPCrte.class
Assemble.class		   badOpcode.src    files		   o		      VPCrte.java
Assemble.java		   badOperand.src   hosts		   ops		      VPCrte.java.bak
Assemble.java.bak	   countDown.exe    ifElse.exe		   pad		      VPCrte.pseudo
Assemble.pseudo		   countDown.src    ifElse.src		   runprog.obfuscate
17. [usnick@cs lab7-VPC]$ vi addTwoNums.exe

        <snip!>  (text deleted from output)

18. [usnick@cs lab7-VPC]$ 
18. [usnick@cs lab7-VPC]$ java VPCrte addTwoNums.exe
[90] -> 8
runProg: unknown opcode: 15
19. [usnick@cs lab7-VPC]$ cat ops
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################
20. [usnick@cs lab7-VPC]$ 
20. [usnick@cs lab7-VPC]$ 
20. [usnick@cs lab7-VPC]$ vi jul5.src

        <snip!>  (text deleted from output)

21. [usnick@cs lab7-VPC]$ cat jul5.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# if (user_input == 0) println '1'

# memory map:
#    81 stores a '1' for output
#    90 stores user input

ILOAD  1
STOR   81

READ   90
LOAD   90   # stores user input in GPREG


WRITE  81

HALT   99
22. [usnick@cs lab7-VPC]$ java Assemble jul5.src
0501
0781
0890
0690
0981
0099
23. [usnick@cs lab7-VPC]$ java Assemble jul5.src > jul5.exe
24. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe
[90]? 9
[81] -> 1
25. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe debug
readToMemory: [0] = (0501)
readToMemory: [1] = (0781)
readToMemory: [2] = (0890)
readToMemory: [3] = (0690)
readToMemory: [4] = (0981)
readToMemory: [5] = (0099)
===================================================================
PCREG = 0000
IRREG = 0000
GPREG = 0000

MEMORY:     0     1     2     3     4     5     6     7     8     9
    ---------------------------------------------------------------
     0|  0501  0781  0890  0690  0981  0099  0000  0000  0000  0000
     1|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     2|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     3|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     4|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     5|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     6|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     7|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     8|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     9|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000

===================================================================
runProg:  MEMORY[00] = 0501, opcode = 05, operand = 01, GPREG = 0000 (ILOAD)
runProg:  MEMORY[01] = 0781, opcode = 07, operand = 81, GPREG = 0001 (STOR)
runProg:  MEMORY[02] = 0890, opcode = 08, operand = 90, GPREG = 0001 (READ)
[90]? 55
runProg:  MEMORY[03] = 0690, opcode = 06, operand = 90, GPREG = 0001 (LOAD)
runProg:  MEMORY[04] = 0981, opcode = 09, operand = 81, GPREG = 0055 (WRITE)
[81] -> 1
runProg:  MEMORY[05] = 0099, opcode = 00, operand = 99, GPREG = 0055 (HALT)
26. [usnvi

        <snip!>  (text deleted from output)

27. [usnick@cs lacat
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# if (user_input == 0) println '1'

# memory map:
#    81 stores a '1' for output
#    90 stores user input

ILOAD  1
STOR   81

READ   90
LOAD   90   # stores user input in GPREG

BN     6    # branch to A

WRITE  81

# A
HALT   99
28. [usnick@cs lajava Assemble
0501
0781
0890
0690
1206
0981
0099
29. [usnick@cs lab7-VPC]$ java Assemble jul5.src > jul5.exe
30. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe
[90]? 5
31. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe
[90]? 4
32. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe
[90]? 3
33. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe
[90]? 1
34. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe
[90]? 0
[81] -> 1
35. [usnick@cs lab7-VPC]$ 
35. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe debug
readToMemory: [0] = (0501)
readToMemory: [1] = (0781)
readToMemory: [2] = (0890)
readToMemory: [3] = (0690)
readToMemory: [4] = (1206)
readToMemory: [5] = (0981)
readToMemory: [6] = (0099)
===================================================================
PCREG = 0000
IRREG = 0000
GPREG = 0000

MEMORY:     0     1     2     3     4     5     6     7     8     9
    ---------------------------------------------------------------
     0|  0501  0781  0890  0690  1206  0981  0099  0000  0000  0000
     1|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     2|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     3|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     4|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     5|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     6|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     7|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     8|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     9|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000

===================================================================
runProg:  MEMORY[00] = 0501, opcode = 05, operand = 01, GPREG = 0000 (ILOAD)
runProg:  MEMORY[01] = 0781, opcode = 07, operand = 81, GPREG = 0001 (STOR)
runProg:  MEMORY[02] = 0890, opcode = 08, operand = 90, GPREG = 0001 (READ)
[90]? 7
runProg:  MEMORY[03] = 0690, opcode = 06, operand = 90, GPREG = 0001 (LOAD)
runProg:  MEMORY[04] = 1206, opcode = 12, operand = 06, GPREG = 0007 (BN)
runProg:  MEMORY[06] = 0099, opcode = 00, operand = 99, GPREG = 0007 (HALT)
36. [usnick@cs lab7-VPC]$ java VPCrte jul5.exe debug
readToMemory: [0] = (0501)
readToMemory: [1] = (0781)
readToMemory: [2] = (0890)
readToMemory: [3] = (0690)
readToMemory: [4] = (1206)
readToMemory: [5] = (0981)
readToMemory: [6] = (0099)
===================================================================
PCREG = 0000
IRREG = 0000
GPREG = 0000

MEMORY:     0     1     2     3     4     5     6     7     8     9
    ---------------------------------------------------------------
     0|  0501  0781  0890  0690  1206  0981  0099  0000  0000  0000
     1|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     2|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     3|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     4|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     5|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     6|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     7|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     8|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     9|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000

===================================================================
runProg:  MEMORY[00] = 0501, opcode = 05, operand = 01, GPREG = 0000 (ILOAD)
runProg:  MEMORY[01] = 0781, opcode = 07, operand = 81, GPREG = 0001 (STOR)
runProg:  MEMORY[02] = 0890, opcode = 08, operand = 90, GPREG = 0001 (READ)
[90]? 0
runProg:  MEMORY[03] = 0690, opcode = 06, operand = 90, GPREG = 0001 (LOAD)
runProg:  MEMORY[04] = 1206, opcode = 12, operand = 06, GPREG = 0000 (BN)
runProg:  MEMORY[05] = 0981, opcode = 09, operand = 81, GPREG = 0000 (WRITE)
[81] -> 1
runProg:  MEMORY[06] = 0099, opcode = 00, operand = 99, GPREG = 0000 (HALT)
37. [usnick@cs lab7-VPC]$ 
37. [usnick@cs lab7-VPC]$ 
37. [usnick@cs lab7-VPC]$ 
37. [usnick@cs lab7-VPC]$ cp jul5.src /usr/tmp/PF2
38. [usnick@cs lab7-VPC]$ cp jul5.src jul5b.src
39. [usnick@cs lab7-VPC]$ vi jul5b.src

        <snip!>  (text deleted from output)

40. [usnick@cs lab7-VPC]$ 
40. [usnick@cs lab7-VPC]$ 
40. [usnick@cs lab7-VPC]$ cat jul5b.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# if (user_input == 0)
#     println '1'
# else
#     println '2'

# memory map:
#    81 stores a '1' for output
#    82 stores a '2' for output
#    90 stores user input

ILOAD  1
STOR   81

ILOAD  2
STOR   82

READ   90
LOAD   90   # stores user input in GPREG

BN     9    # branch to WRITE 82

WRITE  81
BR        # branch to A

WRITE  82

# A
HALT   99
41. [usnick@cs lab7-VPC]$ java Assemble jul5b.src
0501
0781
0502
0782
0890
0690
1209
0981
Exception in thread "main" java.lang.NumberFormatException: For input string: "#"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:470)
	at java.lang.Integer.parseInt(Integer.java:514)
	at Assemble.readSrc(Assemble.java:38)
	at Assemble.main(Assemble.java:76)
42. [usnick@cs lab7-VPC]$ vi jul5b.src

        <snip!>  (text deleted from output)

43. [usnick@cs lab7-VPC]$ 
43. [usnick@cs lab7-VPC]$ 
43. [usnick@cs lab7-VPC]$ cat jul5b.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# if (user_input == 0)
#     println '1'
# else
#     println '2'

# memory map:
#    81 stores a '1' for output
#    82 stores a '2' for output
#    90 stores user input

ILOAD  1
STOR   81

ILOAD  2
STOR   82

READ   90
LOAD   90   # stores user input in GPREG

BN     9    # branch to WRITE 82

WRITE  81
BR     10   # branch to A

WRITE  82

# A
HALT   99



44. [usnick@cs lab7-VPC]$ java Assemble jul5b.src
0501
0781
0502
0782
0890
0690
1209
0981
1010
0982
0099
45. [usnick@cs lab7-VPC]$ java Assemble jul5b.src > jul5b.exe
46. [usnick@cs lab7-VPC]$ 
46. [usnick@cs lab7-VPC]$ 
46. [usnick@cs lab7-VPC]$ java VPCrte jul5b.exe
[90]? 0
[81] -> 1
47. [usnick@cs lab7-VPC]$ java VPCrte jul5b.exe
[90]? 5
[82] -> 2
48. [usnick@cs lab7-VPC]$ vi jul5b.src

        <snip!>  (text deleted from output)

49. [usnick@cs lab7-VPC]$ 
49. [usnick@cs lab7-VPC]$ cd
50. [usnick@cs ~]$ vi Test.java

        <snip!>  (text deleted from output)

51. [usnick@cs ~]$ cat Test.java
public class Test
{
    public static void main(String args[])
    {
        System.out.println("TOP");
here:   System.out.println("BOT");
    }
}
52. [usnick@cs ~]$ javac Test.java
53. [usnicvi

        <snip!>  (text deleted from output)

54. [usniPcat
public class Test
{
    public static void main(String args[])
    {
        System.out.println("TOP");
        goto here;
        System.out.println("MID");
here:   System.out.println("BOT");
    }
}
55. [usnijavac
Test.java:6: illegal start of expression
        goto here;
        ^
Test.java:6: not a statement
        goto here;
             ^
2 errors
56. [usnick@cs ~]$ vi Test.java

        <snip!>  (text deleted from output)

57. [usniPcat
public class Test
{
    public static void main(String args[])
    {
        System.out.println("TOP");
        GOTO here;
        System.out.println("MID");
here:   System.out.println("BOT");
    }
}
58. [usnijavac
Test.java:6: cannot find symbol
symbol  : class GOTO
location: class Test
        GOTO here;
        ^
1 error
59. [usnicvi

        <snip!>  (text deleted from output)

60. [usnick@cs ~]$ javac
Test.java:6: undefined label: here
        break here;
        ^
1 errorPcat
public class Test
{
    public static void main(String args[])
    {
        System.out.println("TOP");
        break here;
        System.out.println("MID");
here:   System.out.println("BOT");
    }
}
62. [usnicvi

        <snip!>  (text deleted from output)

Pcat
public class Test
{
    public static void main(String args[])
    {
        System.out.println("TOP");
        break;
        System.out.println("MID");
        System.out.println("BOT");
    }
}@javac
Test.java:6: break outside switch or loop
        break;
        ^
1 error
65. [usnick@cs ~]$ cal
      July 2016     
Su Mo Tu We Th Fr Sa
                1  2
 3  4 m 57m  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
31
66. [usnick@cs ~]$ mail usnick
Subject: PF2 lab7 due Jul 12
.
EOT
Null message body; hope that's ok
67. [usnick@cs ~]$ 
67. [usnick@cs ~]$ exit

Script done on Tue 05 Jul 2016 01:21:58 PM CDT
