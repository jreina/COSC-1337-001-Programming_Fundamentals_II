Script started on Thu 30 Jun 2016 11:48:38 AM CDT
==============================================================================
 The temperature in Amarillo is  77
==============================================================================
[usnick@cs ~]$ nums
2. [usnick@cs ~]$ 
2. [usnick@cs ~]$ cd PF2/lab7-VPC/
3. [usnick@cs lab7-VPC]$ cp ops /usr/tmp/PF2
4. [usnick@cs lab7-VPC]$ cp ops jun30.src
5. [usnick@cs lab7-VPC]$ 
5. [usnick@cs lab7-VPC]$ java Assemble jun30.src 
6. [usnick@cs lab7-VPC]$ 
6. [usnick@cs lab7-VPC]$ java Assemble jun30.src > jun30.src
6. [usnick@cs lab7-VPC]$ 
6. [usnick@cs lab7-VPC]$ cp jun30.src x
7. [usnick@cs lab7-VPC]$ cat x
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################
8. [usnick@cs lab7-VPC]$ 
8. [usnick@cs lab7-VPC]$ jdkfjdkfjdefjkd > x
bash: jdkfjdkfjdefjkd: command not found
9. [usnick@cs lab7-VPC]$ cat x
10. [usnick@cs lab7-VPC]$ ls -l x
-rw-rw-r--. 1 usnick usnick 0 Jun 30 11:53 x
11. [usnick@cs lab7-VPC]$ 
11. [usnick@cs lab7-VPC]$ rm x
12. [usnick@cs lab7-VPC]$ java Assemble jun30.src > jun30.exe
13. [usnick@cs lab7-VPC]$ 
13. [usnick@cs lab7-VPC]$ vi jun30.src

        <snip!>  (text deleted from output)

14. [usnick@cs lab7-VPC]$ cat jun30.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# 'i' will be read in from user
#  calculate and display i+1

# Memory Map:
#  81 stores a '1' for ++ operations
#  90 stores user input 'i'
#  91 stores the sum for output purposes

ILOAD 1
STOR  81  # store a '1' in MEM[81] for increment

READ  90
LOAD  90   # stores user input in GPREG

ADD   81

STOR  91
WRITE 91

HALT  99


15. [usnick@cs lab7-VPC]$ java Assemble jun30.src
0501
0781
0890
0690
0181
0791
0991
0099
16. [usnick@cs lab7-VPC]$ java Assemble jun30.src > jun30.exe
17. [usnick@cs lab7-VPC]$ cat jun30.exe
0501
0781
0890
0690
0181
0791
0991
0099
18. [usnick@cs lab7-VPC]$ 
18. [usnick@cs lab7-VPC]$ java VPCrte jun30.exe
[90]? ^C19. [usnick@cs lab7-VPC]$ 
19. [usnick@cs lab7-VPC]$ 
19. [usnick@cs lab7-VPC]$ cat jun30.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# 'i' will be read in from user
#  calculate and display i+1

# Memory Map:
#  81 stores a '1' for ++ operations
#  90 stores user input 'i'
#  91 stores the sum for output purposes

ILOAD 1
STOR  81  # store a '1' in MEM[81] for increment

READ  90
LOAD  90   # stores user input in GPREG

ADD   81

STOR  91
WRITE 91

HALT  99


20. [usnick@cs lab7-VPC]$ java VPCrte jun30.exe
[90]? 5
[91] -> 6
21. [usnick@cs lab7-VPC]$ vi jun30.src

        <snip!>  (text deleted from output)

22. [usnick@cs lab7-VPC]$ cat jun30.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# 'i' will be read in from user
#  calculate and display i+1

# Memory Map:
#  81 stores a '1' for ++ operations
#  90 stores user input 'i'
#  91 stores the sum for output purposes

ILOAD 1
STOR  81  # store a '1' in MEM[81] for increment

READ  90
#LOAD  90   # stores user input in GPREG

ADD   90

STOR  91
WRITE 91

HALT  99


23. [usnick@cs lab7-VPC]$ java Assemble jun30.src
0501
0781
0890
0190
0791
0991
0099
24. [usnick@cs lab7-VPC]$ java Assemble jun30.src > jun30.exe
25. [ujava VPCrte jun30.exe
[90]? 8
[91] -> 9
26. [uvi

        <snip!>  (text deleted from output)

27. [usnick@cs lab7-VPC]$ cat jun30.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# 'i' will be read in from user
#  calculate and display i+1

# Memory Map:
#  81 stores a '1' for ++ operations
#  90 stores user input 'i'
#  91 stores the sum for output purposes

ILOAD 1
STOR  81  # store a '1' in MEM[81] for increment

READ  90

DUMP  99

LOAD  90   # stores user input in GPREG

ADD   81

STOR  91
WRITE 91

HALT  99


28. [usnick@cs lab7-VPC]$ java Assemble jun30.src
0501
0781
0890
1399
0690
0181
0791
0991
0099
29. [usnick@cs lab7-VPC]$ java Assemble jun30.src > jun30.exe
30. [usnick@cs lab7-VPC]$ 
30. [ucat
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# 'i' will be read in from user
#  calculate and display i+1

# Memory Map:
#  81 stores a '1' for ++ operations
#  90 stores user input 'i'
#  91 stores the sum for output purposes

ILOAD 1
STOR  81  # store a '1' in MEM[81] for increment

READ  90

DUMP  99

LOAD  90   # stores user input in GPREG

ADD   java VPCrte jun30.exe
[90]? 20
===================================================================
PCREG = 0003
IRREG = 1399
GPREG = 0001

MEMORY:     0     1     2     3     4     5     6     7     8     9
    ---------------------------------------------------------------
     0|  0501  0781  0890  1399  0690  0181  0791  0991  0099  0000
     1|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     2|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     3|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     4|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     5|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     6|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     7|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     8|  0000  0001  0000  0000  0000  0000  0000  0000  0000  0000
     9|  0020  0000  0000  0000  0000  0000  0000  0000  0000  0000

===================================================================
[91] -> 21
32. [usnick@cs lab7-VPC]$ 
32. [usnick@cs lab7-VPC]$ cp jun30.src /usr/tmp/PF2
33. [usnick@cs lab7-VPC]$ 
33. [usnick@cs lab7-VPC]$ cp ops jun30b.src
34. [usnick@cs lab7-VPC]$ vi jun30b.src

        <snip!>  (text deleted from output)

35. [usnick@cs lab7-VPC]$ cat jun30b.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# purpose of program:  add two numbers that are provided interactively

# variable map:
#
#    90 : first var
#    91 : second var
#    95 : sum

READ  90
READ  91
LOAD  91

ADD   90

STOR  95

WRITE 95

HALT  99
36. [usnick@cs lab7-VPC]$ java Assemble jun30b.src
0890
0891
0691
0190
0795
0995
0099
37. [usnick@cs lab7-VPC]$ java Assemble jun30b.src > jun30b.exe
38. [usnick@cs lab7-VPC]$ java VPCrte jun30b.exe
[90]? 6
[91]? 8
[95] -> 14
39. [usnick@cs lab7-VPC]$ 
39. [usnick@cs lab7-VPC]$ java VPCrte jun30b.exe debug
readToMemory: [0] = (0890)
readToMemory: [1] = (0891)
readToMemory: [2] = (0691)
readToMemory: [3] = (0190)
readToMemory: [4] = (0795)
readToMemory: [5] = (0995)
readToMemory: [6] = (0099)
===================================================================
PCREG = 0000
IRREG = 0000
GPREG = 0000

MEMORY:     0     1     2     3     4     5     6     7     8     9
    ---------------------------------------------------------------
     0|  0890  0891  0691  0190  0795  0995  0099  0000  0000  0000
     1|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     2|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     3|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     4|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     5|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     6|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     7|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     8|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     9|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000

===================================================================
runProg:  MEMORY[00] = 0890, opcode = 08, operand = 90, GPREG = 0000 (READ)
[90]? 5
runProg:  MEMORY[01] = 0891, opcode = 08, operand = 91, GPREG = 0000 (READ)
[91]? 6
runProg:  MEMORY[02] = 0691, opcode = 06, operand = 91, GPREG = 0000 (LOAD)
runProg:  MEMORY[03] = 0190, opcode = 01, operand = 90, GPREG = 0006 (ADD)
runProg:  MEMORY[04] = 0795, opcode = 07, operand = 95, GPREG = 0011 (STOR)
runProg:  MEMORY[05] = 0995, opcode = 09, operand = 95, GPREG = 0011 (WRITE)
[95] -> 11
runProg:  MEMORY[06] = 0099, opcode = 00, operand = 99, GPREG = 0011 (HALT)
40. [usnick@cs lab7-VPC]$ 
40. [usnick@cs lab7-VPC]$ cp jun30b.src /usr/tmp/PF2
41. [usnick@cs lab7-VPC]$ 
41. [usnick@cs lab7-VPC]$ cp jun30b.src jun30c.src
42. [usnick@cs lab7-VPC]$ 
42. [usnick@cs lab7-VPC]$ vi jun30c.src

        <snip!>  (text deleted from output)

43. [usnick@cs lab7-VPC]$ 
43. [usnick@cs lab7-VPC]$ 
43. [usnick@cs lab7-VPC]$ java Assemble jun30c.src
0502
0782
0505
0785
0890
0690
0382
0185
0795
0995
0099
44. [usnick@cs lab7-VPC]$ java Assemble jun30c.src > jun30c.exe
45. [usnick@cs l@cp jun30b.src
45. [usnick@cs lab7-VPC]$ cat jun30c.src
#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# purpose of program:  implement 2x+5 where x is supplied by user

# variable map:
#
#    90 : stores variable 'x'
#    82 : stores a 2 for multiplication
#    85 : stores a 5 for addition
#    95 : stores result of expression 2x+5 for printing

ILOAD 2
STOR  82  # stores a '2' in MEMORY[82]

ILOAD 5
STOR  85  # stores a '5' in MEMORY[85]

READ  90
LOAD  90  # user input is in MEMORY[90] and GPREG

MLT   82

ADD   85

STOR  95
WRITE 95

HALT  99

46. [usnick@cs lab7-VPC]$ java VPCrte jun30c.exe
[90]? 4
[95] -> 13
47. [usnick@cs lab7-VPC]$ java VPCrte jun30c.exe
[90]? 10
[95] -> 25
48. [usnick@cs lab7-VPC]$ java VPCrte jun30c.exe debug
readToMemory: [0] = (0502)
readToMemory: [1] = (0782)
readToMemory: [2] = (0505)
readToMemory: [3] = (0785)
readToMemory: [4] = (0890)
readToMemory: [5] = (0690)
readToMemory: [6] = (0382)
readToMemory: [7] = (0185)
readToMemory: [8] = (0795)
readToMemory: [9] = (0995)
readToMemory: [10] = (0099)
===================================================================
PCREG = 0000
IRREG = 0000
GPREG = 0000

MEMORY:     0     1     2     3     4     5     6     7     8     9
    ---------------------------------------------------------------
     0|  0502  0782  0505  0785  0890  0690  0382  0185  0795  0995
     1|  0099  0000  0000  0000  0000  0000  0000  0000  0000  0000
     2|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     3|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     4|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     5|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     6|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     7|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     8|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000
     9|  0000  0000  0000  0000  0000  0000  0000  0000  0000  0000

===================================================================
runProg:  MEMORY[00] = 0502, opcode = 05, operand = 02, GPREG = 0000 (ILOAD)
runProg:  MEMORY[01] = 0782, opcode = 07, operand = 82, GPREG = 0002 (STOR)
runProg:  MEMORY[02] = 0505, opcode = 05, operand = 05, GPREG = 0002 (ILOAD)
runProg:  MEMORY[03] = 0785, opcode = 07, operand = 85, GPREG = 0005 (STOR)
runProg:  MEMORY[04] = 0890, opcode = 08, operand = 90, GPREG = 0005 (READ)
[90]? 10
runProg:  MEMORY[05] = 0690, opcode = 06, operand = 90, GPREG = 0005 (LOAD)
runProg:  MEMORY[06] = 0382, opcode = 03, operand = 82, GPREG = 0010 (MLT)
runProg:  MEMORY[07] = 0185, opcode = 01, operand = 85, GPREG = 0020 (ADD)
runProg:  MEMORY[08] = 0795, opcode = 07, operand = 95, GPREG = 0025 (STOR)
runProg:  MEMORY[09] = 0995, opcode = 09, operand = 95, GPREG = 0025 (WRITE)
[95] -> 25
runProg:  MEMORY[10] = 0099, opcode = 00, operand = 99, GPREG = 0025 (HALT)
49. [usnick@cs lab7-VPC]$ 
49. [usnick@cs lab7-VPC]$ exit

Script done on Thu 30 Jun 2016 01:05:11 PM CDT
